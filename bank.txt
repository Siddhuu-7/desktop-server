#include <stdio.h> 
int main()  
{ 
int alloc[10][10], max[10][10]; 
int avail[10], work[10], total[10]; 
int need[10][10], finish[10]; 
int n, m, i, j, count = 0; 
printf("Enter the number of processes\n");  
scanf("%d", &n); 
printf("Enter the number of resources: \n"); 
scanf("%d", &m); 
// Initialize finish array to mark all processes as unfinished 
for (i = 0; i < n; i++) finish[i] = 0; 
// Input the max matrix 
printf("Enter the max matrix:\n"); 
for (i = 0; i < n; i++) 
for (j = 0; j < m; j++) 
scanf("%d", &max[i][j]); 
// Input the allocation matrix 
printf("Enter the allocation matrix:\n"); 
for (i = 0; i < n; i++) 
for (j = 0; j < m; j++) 
scanf("%d", &alloc[i][j]); 
// Input the total resources in the system 
printf("Enter the resource vector (Total instances for each resource type):\n"); 
for (i = 0; i < m; i++) 
scanf("%d", &total[i]); 
// Calculate the available resources 
for (i = 0; i < m; i++) { 
avail[i] = total[i]; 
for (j = 0; j < n; j++) { 
avail[i] -= alloc[j][i]; 
} 
work[i] = avail[i]; 
} 
// Calculate the need matrix 
for (i = 0; i < n; i++) 
for (j = 0; j < m; j++) 
need[i][j] = max[i][j] - alloc[i][j]; 
printf("Checking for safe sequence...\n"); 
int process_found; 
while (count < n) { 
process_found = 0; 
for (i = 0; i < n; i++) { 
if (finish[i] == 0)  // Process i is not yet finished 
{               
int can_allocate = 1; 
for (j = 0; j < m; j++)  
{ 
if (need[i][j] > work[j]) { 
can_allocate = 0; 
break; 
} 
} 
if (can_allocate)  
{ 
// Allocating resources to process i 
for (j = 0; j < m; j++) { 
work[j] += alloc[i][j]; 
} 
finish[i] = 1;  // Mark process as finished 
                    process_found = 1; 
                    count++; 
                    printf("Resources allocated to Process %d\n", i + 1); 
                    printf("Available resources now: "); 
                    for (j = 0; j < m; j++) { 
                        printf("%d ", work[j]); 
                    } 
                    printf("\n"); 
                } 
            } 
        } 
        if (!process_found) { 
            printf("System is not in a safe state.\n"); 
            return 1; 
        } 
    } 
    printf("System is in a safe state.\n"); 
    return 0; 
}